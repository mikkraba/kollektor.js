// Generated by dts-bundle v0.7.3

export * from 'kollektor.js/classes/components/Container';
export * from 'kollektor.js/classes/components/Target';
export * from 'kollektor.js/classes/Configuration';
export * from 'kollektor.js/classes/trackers/BaseTracker';
export * from 'kollektor.js/classes/trackers/InteractionTracker';
export * from 'kollektor.js/classes/trackers/ScrollTracker';
export * from 'kollektor.js/enums/ConfigurationTemplates';
export * from 'kollektor.js/helpers/Messenger';
export * from 'kollektor.js/helpers/PrivacyManager';
export * from 'kollektor.js/helpers/Utilities';
export * from 'kollektor.js/index';
export * from 'kollektor.js/interfaces/IBaseCollector';
export * from 'kollektor.js/interfaces/IBaseData';
export * from 'kollektor.js/interfaces/IConfiguration';
export * from 'kollektor.js/interfaces/IContainerData';
export * from 'kollektor.js/interfaces/IDebounceEvent';
export * from 'kollektor.js/interfaces/IInteractionData';
export * from 'kollektor.js/interfaces/INativeProperties';
export * from 'kollektor.js/interfaces/IOptions';
export * from 'kollektor.js/interfaces/IPrivacySettings';
export * from 'kollektor.js/interfaces/IScrollData';
export * from 'kollektor.js/interfaces/ITarget';
export * from 'kollektor.js/interfaces/ITracker';
export * from 'kollektor.js/interfaces/ITrackerCallback';
export * from 'kollektor.js/templates/bootstrap4';
export * from 'kollektor.js/templates/default';

declare module 'kollektor.js/classes/components/Container' {
    export class Container {
        name: string;
        selector: string;
        nameAttribute?: string;
        condition?: ((element: HTMLElement) => boolean);
        constructor(name: string, selector: string, condition?: () => boolean, nameAttribute?: string);
    }
}

declare module 'kollektor.js/classes/components/Target' {
    import { ITarget, attributeFunction } from 'kollektor.js/interfaces/ITarget';
    export class Target implements ITarget {
        events: string[] | string;
        name: string;
        selector: string;
        labelAttribute?: string | attributeFunction;
        identifierAttribute?: string | attributeFunction;
        condition?: ((element: HTMLElement) => boolean);
        constructor(name: string, selector: string, events: string[], condition?: () => boolean, labelAttribute?: string, identifierAttribute?: string);
    }
}

declare module 'kollektor.js/classes/Configuration' {
    import { IConfiguration } from 'kollektor.js/interfaces/IConfiguration';
    import { IPrivacySettings } from 'kollektor.js/interfaces/IPrivacySettings';
    import { Target } from 'kollektor.js/classes/components/Target';
    import { Container } from 'kollektor.js/classes/components/Container';
    import { ITrackerCallback } from 'kollektor.js/interfaces/ITrackerCallback';
    import { IOptions } from 'kollektor.js/interfaces/IOptions';
    import { IDebounceEvent } from 'kollektor.js/interfaces/IDebounceEvent';
    export class Configuration implements IConfiguration {
        template: string;
        isDebug: boolean;
        privacy: IPrivacySettings;
        debounce: IDebounceEvent | IDebounceEvent[];
        targets: Target[];
        containers: Container[];
        consumers: ITrackerCallback[];
        scrollDistances: number[];
        constructor(options: IOptions);
    }
}

declare module 'kollektor.js/classes/trackers/BaseTracker' {
    import { ITracker } from 'kollektor.js/interfaces/ITracker';
    export abstract class BaseTracker implements ITracker {
        eventType: string;
        constructor(e: Event);
        protected abstract populateData(): void;
    }
}

declare module 'kollektor.js/classes/trackers/InteractionTracker' {
    import { BaseTracker } from 'kollektor.js/classes/trackers/BaseTracker';
    import { Target } from 'kollektor.js/classes/components/Target';
    import { Container } from 'kollektor.js/classes/components/Container';
    import { IInteractionData } from 'kollektor.js/interfaces/IInteractionData';
    export class InteractionTracker extends BaseTracker {
        constructor(element: HTMLElement, e: MouseEvent, target: Target, containers: Container[]);
        protected populateData(): IInteractionData;
    }
}

declare module 'kollektor.js/classes/trackers/ScrollTracker' {
    import { BaseTracker } from 'kollektor.js/classes/trackers/BaseTracker';
    export class ScrollTracker extends BaseTracker {
        constructor(scrollPercentage: number, event: Event);
        protected populateData(): void;
    }
}

declare module 'kollektor.js/enums/ConfigurationTemplates' {
    export enum ConfigurationTemplates {
        CUSTOM = "custom",
        DEFAULT = "default",
        BOOTSTRAP4 = "bootstrap4"
    }
}

declare module 'kollektor.js/helpers/Messenger' {
    export class Messenger {
        static instance: Messenger;
        static getInstance(isDebug: boolean): Messenger;
        log(message: string | object): void;
        error(message?: string | object): void;
    }
}

declare module 'kollektor.js/helpers/PrivacyManager' {
    import { IPrivacySettings } from 'kollektor.js/interfaces/IPrivacySettings';
    export class PrivacyManager {
        constructor(settings: IPrivacySettings);
        maskNumbersLongerThanLimit(value: string): string;
        isElementNotSuitable(element: HTMLElement): boolean;
    }
}

declare module 'kollektor.js/helpers/Utilities' {
    export const debounce: <F extends (...args: any[]) => any>(func: F, waitFor: number) => (...args: Parameters<F>) => ReturnType<F>;
}

declare module 'kollektor.js/index' {
    import { IConfiguration } from 'kollektor.js/interfaces/IConfiguration';
    import { IOptions } from 'kollektor.js/interfaces/IOptions';
    export class Kollektor {
        static getInstance(options?: IOptions): Kollektor | void;
        static getTemplate(template?: string): IConfiguration;
        track(): void;
    }
    export const register: (options: IOptions) => void | Kollektor;
}

declare module 'kollektor.js/interfaces/IBaseCollector' {
    export interface IBaseCollector {
        eventType: string;
        event: Event;
        id: string;
        href: string;
        attributes: string[];
        classes: string[];
    }
}

declare module 'kollektor.js/interfaces/IBaseData' {
    export interface IBaseData {
        action: string;
        label: string;
    }
}

declare module 'kollektor.js/interfaces/IConfiguration' {
    import { Target } from 'kollektor.js/classes/components/Target';
    import { ITrackerCallback } from 'kollektor.js/interfaces/ITrackerCallback';
    import { IPrivacySettings } from 'kollektor.js/interfaces/IPrivacySettings';
    import { Container } from 'kollektor.js/classes/components/Container';
    import { IDebounceEvent } from 'kollektor.js/interfaces/IDebounceEvent';
    export interface IConfiguration {
        template: string;
        isDebug: boolean;
        privacy: IPrivacySettings;
        debounce: IDebounceEvent | IDebounceEvent[] | null;
        targets: Target[];
        containers: Container[];
        consumers: ITrackerCallback[];
        scrollDistances: number[];
    }
}

declare module 'kollektor.js/interfaces/IContainerData' {
    export interface IContainerData {
        highest: string;
        lowest: string;
        all: string;
    }
}

declare module 'kollektor.js/interfaces/IDebounceEvent' {
    export interface IDebounceEvent {
        event: "all" | string;
        delay: number;
    }
}

declare module 'kollektor.js/interfaces/IInteractionData' {
    import { IBaseData } from 'kollektor.js/interfaces/IBaseData';
    import { IContainerData } from 'kollektor.js/interfaces/IContainerData';
    export interface IInteractionData extends IBaseData {
        type: string;
        identificator: string;
        container: IContainerData;
        isOutbound: boolean;
        isLink: boolean;
    }
}

declare module 'kollektor.js/interfaces/INativeProperties' {
    export interface INativeProperties {
        id: string;
        label: string;
        attributes: NamedNodeMap;
        classes: DOMTokenList;
        href: string;
        type: string;
        role: string;
        style: string;
    }
}

declare module 'kollektor.js/interfaces/IOptions' {
    import { IPrivacySettings } from 'kollektor.js/interfaces/IPrivacySettings';
    import { Target } from 'kollektor.js/classes/components/Target';
    import { ITrackerCallback } from 'kollektor.js/interfaces/ITrackerCallback';
    import { IDebounceEvent } from 'kollektor.js/interfaces/IDebounceEvent';
    export interface IOptions {
        template?: string;
        isDebug?: boolean;
        debounce?: IDebounceEvent | IDebounceEvent[] | null;
        privacy?: IPrivacySettings;
        targets?: Target[];
        containers?: Target[];
        consumers?: ITrackerCallback[];
        scrollDistances?: number[];
    }
}

declare module 'kollektor.js/interfaces/IPrivacySettings' {
    export interface IPrivacySettings {
        masking: boolean;
        limit: number;
        excludedSelectors: string[];
    }
}

declare module 'kollektor.js/interfaces/IScrollData' {
    import { IBaseData } from 'kollektor.js/interfaces/IBaseData';
    export interface IScrollData extends IBaseData {
    }
}

declare module 'kollektor.js/interfaces/ITarget' {
    export type attributeFunction = () => string;
    export interface ITarget {
        events: string[] | string;
        name: string;
        selector: string;
        labelAttribute?: string | attributeFunction;
        identifierAttribute?: string | attributeFunction;
        condition?: ((element: HTMLElement) => boolean);
    }
}

declare module 'kollektor.js/interfaces/ITracker' {
    export interface ITracker {
        eventType: string;
    }
}

declare module 'kollektor.js/interfaces/ITrackerCallback' {
    export interface ITrackerCallback {
        name: string;
        map: Map<string, string>;
        events: string[];
        function: (event: string, mapObj: object) => void;
    }
}

declare module 'kollektor.js/templates/bootstrap4' {
    import { IConfiguration } from 'kollektor.js/interfaces/IConfiguration';
    export const bootstrap4Template: IConfiguration;
}

declare module 'kollektor.js/templates/default' {
    import { IConfiguration } from 'kollektor.js/interfaces/IConfiguration';
    export const defaultTemplate: IConfiguration;
}

